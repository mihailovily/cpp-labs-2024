1. Войти в систему со своим логином/паролем и открыть эмулятор
   терминала.
2. Создать в домашнем каталоге каталог localrepo и в нем два файла —
   first.txt и second.txt. Просмотреть и зафиксировать детальную информацию о
   каталоге localrepo (сделать копию экрана или вывести в файл и сохранить для
   отчета).

cd ~  # Переход в домашний каталог
mkdir localrepo  # Создание каталога localrepo
cd localrepo  # Переход в каталог localrepo
nano first.txt second.txt  # Создание файлов first.txt и second.txt
ls -l  # Просмотр детальной информации о файлах и каталоге

3. Перейти в каталог localrepo. Инициализировать в каталоге localrepo
   репозиторий git (команда git init). Просмотреть и зафиксировать детальную
   информацию о каталоге localrepo. Как изменился каталог после создания
   репозитория? Изучить изменения — вывести на экран содержимое
   каталога .git, проверить статус репозитория (git status).

git init  # Инициализация репозитория
ls -a  # Просмотр скрытых файлов, в том числе .git
git status  # Проверка статуса репозитория

4. Добавить (команда git add) оба файла для сохранения в репозитории в
   следующем коммите. Проверить статус репозитория. Найти в каталоге .git файл
   index (в .git не переходить!). Зафиксировать время сохранения файла index.

git add first.txt second.txt  # Добавление файлов в индекс
git status  # Проверка статуса
ls .git  # Просмотр содержимого каталога .git

5. Зафиксировать (сохранить) изменения в репозитории (git commit).
   Вывести на экран информацию о коммите (git show). Проверить статус
   репозитория. Проверить время сохранения файла index и сравнить его с
   предыдущим значением. Сделайте вывод о роли файла index при
   выполнении фиксации изменений в репозитории и почему команда git add
   называется «добавление в индекс».

git commit -m "Init"  # Фиксация изменений
git show  # Просмотр информации о коммите
git status  # Проверка статуса
ls -l .git/index  # Просмотр информации о файле index

6. Создать новый файл third.txt и зафиксировать его в репозитории.
   Отредактировать third.txt и зафиксировать в репозитории без предварительной
   индексации (команда commit с ключом -a).

nano third.txt  # Создание файла third.txt
git add third.txt  # Добавление файла в индекс
git commit -m "Add third.txt"  # Коммит

Чтобы отредактировать third.txt без предварительной индексации:

echo "Edit third.txt" > third.txt  # Редактирование файла
git commit -a -m "Edit third.txt"  # Коммит с ключом -a

7. Внести изменения в каждый из трех файлов. Проверить статус
   репозитория.

echo "Edit first.txt" >> first.txt
echo "Edit second.txt" >> second.txt
echo "Edit third.txt" >> third.txt
git status  # Проверка статуса

8. Для первого файла отменить последние изменения (git checkout).
   Второй и третий файлы проиндексировать. Проверить статус.

git checkout -- first.txt  # Отмена изменений в first.txt
git add second.txt third.txt  # Индексация второго и третьего файла
git status  # Проверка статуса

9. Отказаться от сохранения изменений второго файла (git reset HEAD), а
   изменения в третьем — зафиксировать в репозитории. Проверить статус.
   Выполнить команду, которая уберет second.txt из статуса (см. п. 8).

git reset HEAD second.txt  # Отказ от изменений во втором файле
git commit -m "Changes in third.txt"  # Фиксация изменений в третьем файле
git status  # Проверка статуса

10. Вернуть последний коммит для внесения дополнительных
    изменений: внести изменения в файл, добавить их в индекс, затем выполнить
    команду git commit - -amend, при этом изменить текст комментария. Проверить
    статус и убедиться, что предыдущая редакция коммита отменена.

git commit --amend -m "Updated commit message"  # Редактирование последнего коммита
git status  # Проверка статуса

11. Просмотреть историю изменений репозитория (git log) — подробную
    и краткую.

git log  # Подробная история изменений
git log --oneline  # Краткая история изменений

12. Просмотреть историю изменений (логи) отдельного (любого) файла.
    Сравнить полученный результат с результатом, полученным для всего
    репозитория.

git log -- first.txt  # История изменений для first.txt
git log -- second.txt  # История изменений для second.txt

13. Изменить первый и второй файл, первый добавить в индекс. Для
    каждого файла сравнить текущую версию (с изменениями) и последнюю
    зафиксированную версию, для этого подобрать вариант команды git diff,
    соответствующий состоянию файла.

git diff first.txt  # Разница между текущей версией и последней зафиксированной версией для first.txt
git diff second.txt  # Разница между текущей версией и последней зафиксированной версией для second.txt

14. Сохранить все изменения в репозитории.

git add .  # Индексация всех изменений
git commit -m "Save all changes"  # Фиксация изменений

15. Переименовать файл first.txt средствами операционной системы
    (команда mv) — f1.txt, second.txt – средствами репозитория (git mv)— f2.txt.

mv first.txt f1.txt  # Переименование первого файла
git mv second.txt f2.txt  # Переименование второго файла с использованием git

16. Сделать копию третьего файла средствами операционной системы —
    f3.txt (команда cp).

cp third.txt f3.txt  # Копирование третьего файла

17. Создать файл fourth.txt и добавить его в индекс.

nano fourth.txt  # Создание файла fourth.txt
git add fourth.txt  # Добавление файла в индекс

18. Создать файл fifth.txt (можно пустой), но в индекс не добавлять.

nano fifth.txt  # Создание пустого файла fifth.txt

19. Вывести на экран статус репозитория а) подробный, б) краткий.
    Изучить обозначения, используемые краткой формой представления статуса
    репозитория. Определить, какие изменения надо добавить в индекс для
    последующей фиксации, индексировать их и зафиксировать в репозитории.

git status  # Подробный статус
git status -s  # Краткий статус
git add fourth.txt  # Индексация файла fourth.txt
git commit -m "Add fourth.txt"  # Фиксация изменений

20. Настроить игнорирование некоторых файлов, для этого создать в
    рабочем каталоге файл .gitignore и добавить в него шаблоны (маски) для имен
    файлов, которые репозиторий не должен замечать (они не будут отображаться в
    статусе). Задать три варианта шаблона имен файлов: 1) с символом *, 2) c [ ], 3)
    c ? (знак вопроса).

echo "*.log" > .gitignore  # Игнорирование файлов с расширением .log
echo "temp/*" >> .gitignore  # Игнорирование файлов в папке temp
echo "?file" >> .gitignore  # Игнорирование файлов с любым однобуквенным именем, заканчивающимся на "file"

21. Создать 3 файла с именами, удовлетворяющими этим шаблонам.
    Объяснить, почему эти имена соответствуют конкретному шаблону. Проверить
    статус репозитория и оценить результаты игнорирования файлов.

nano test.log  # Файл, соответствующий шаблону *.log
nano temp/testfile  # Файл в папке temp, который игнорируется
nano xfile  # Файл, соответствующий шаблону ?file
git status  # Проверка статуса

22. Проверить статус репозитория; если есть незафиксированные
    изменения, зафиксировать.

git status  # Проверка статуса и фиксация изменений, если они есть

23. Удалить файл f2.txt средствами файловой системы. Проверить статус.
    Восстановить файл из репозитория.

rm f2.txt  # Удаление файла f2.txt
git status  # Проверка статуса
git checkout -- f2.txt  # Восстановление файла f2.txt

24. Удалить файл third.txt командой git rm. Проверить статус.
    Зафиксировать удаление файла.

git rm third.txt  # Удаление файла из репозитория
git status  # Проверка статуса
git commit -m "Remove third.txt"  # Фиксация удаления

25. Отредактировать и добавить в индекс файл fifth.txt. Затем
    отредактировать его еще раз и проверить статус. Какие изменения будут
    зафиксированы последующим коммитом? Что надо сделать, чтобы все
    изменения были зафиксированы?

echo "First edit" > fifth.txt  # Редактирование файла
git add fifth.txt  # Индексация изменений
echo "Second edit" >> fifth.txt  # Второе редактирование
git status  # Проверка статуса

26. Отредактировать файл fifth.txt еще раз, добавить в индекс и
    зафиксировать, а затем исключить файл из списка отслеживаемых
    репозиторием. После выполнения операции файл должен остаться в каталоге!

git rm --cached fifth.txt  # Удаление файла из репозитория, но не из файловой системы
git status  # Проверка статуса

27. Изменить файл fourth.txt, добавить в индекс, а затем удалить файл,
    несмотря на незафиксированные изменения — для этого подобрать подходящий
    вариант команды git rm.

echo "Changes to fourth.txt" > fourth.txt  # Изменение файла
git add fourth.txt  # Индексация изменений
git rm fourth.txt  # Удаление файла, несмотря на незафиксированные изменения
git commit -m "Remove fourth.txt"  # Фиксация удаления

28. Подготовить отчет на основе полученных результатов и ответить на
    вопросы.
